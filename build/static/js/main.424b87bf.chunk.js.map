{"version":3,"sources":["components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","guardarBusqueda","useState","termino","guardarTermino","error","guardarError","onSubmit","e","preventDefault","trim","className","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagen","imagenes","map","key","id","App","busqueda","guardarImagenes","alerta","setAlerta","paginaactual","guardarPaginaActual","totalpaginas","guardarTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","length","console","log","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarAPI","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.424b87bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Formulario = ({ guardarBusqueda }) => {\n\n    const [termino, guardarTermino] = useState(\"\")\n    const [error, guardarError] = useState(false)\n\n    const buscarImagenes = e => {\n        e.preventDefault()\n\n        // validar\n        if (termino.trim() === \"\") {\n            guardarError(true)\n            return\n        } else {\n            guardarError(false)\n        }\n\n        // enviar termino de busqueda\n        guardarBusqueda(termino)\n    }\n\n    return (\n        <form\n            onSubmit={buscarImagenes}\n        >\n            <div className=\"row\">\n                <div className=\"form-group col-md-8\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Busca una imagen, ejemplo: fútbol o café\"\n                        onChange={(e) => guardarTermino(e.target.value)}\n                    />\n                </div>\n\n                <div className=\"form-group col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-lg btn-danger btn-block\"\n                        value=\"Buscar\"\n                    />\n                </div>\n            </div>\n            {error ? <p className=\"text-danger\">Debes ingresar una palabra</p> : null}\n        </form>\n    )\n}\n\nexport default Formulario","import React from 'react'\n\nconst Imagen = ({ imagen }) => {\n\n    // extraer las variables\n    const { largeImageURL, likes, previewURL, tags, views } = imagen\n\n    return (\n        <div className=\"col-12 col-md-6 col-md-4 col-lg-3\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\n            </div>\n            <div className=\"card-body\">\n                <p className=\"card-text\">\n                    {likes} Me gusta\n                </p>\n                <p className=\"card-text\">\n                    {views} Vistas\n                </p>\n            </div>\n            <div className=\"card-footer\">\n                <a href={largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\">Ver imagen</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Imagen","import React from 'react'\nimport Imagen from \"../components/Imagen\"\n\nconst ListadoImagen = ({ imagenes }) => {\n\n    return (\n        <div className=\"col-12 p-5 row\">\n            {imagenes.map(imagen => (\n                <Imagen\n                    key={imagen.id}\n                    imagen={imagen}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default ListadoImagen","import React, { useState, useEffect } from 'react';\n\n// components\nimport Formulario from \"./components/Formulario\"\nimport ListadoImagen from './components/ListadoImagenes';\n\n\nfunction App() {\n\n  // state de la app\n  const [busqueda, guardarBusqueda] = useState(\"\")\n  const [imagenes, guardarImagenes] = useState([])\n  const [alerta, setAlerta] = useState(false)\n  const [paginaactual, guardarPaginaActual] = useState(1)\n  const [totalpaginas, guardarTotalPaginas] = useState(1)\n\n  useEffect(() => {\n\n    const consultarAPI = async () => {\n\n      if (busqueda === \"\") return\n      const imagenesPorPagina = 30\n      const key = \"16677041-2aa64eb7c624795d61b0034e1\"\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`\n\n      const respuesta = await fetch(url)\n      const resultado = await respuesta.json()\n\n      guardarImagenes(resultado.hits)\n\n      resultado.hits.length === 0 ? setAlerta(true) : setAlerta(false)\n      console.log(resultado.hits)\n      console.log(alerta)\n\n      // calc total paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina)\n      guardarTotalPaginas(calcularTotalPaginas)\n\n      // mover la pantalla arriba\n      const jumbotron = document.querySelector(\".jumbotron\")\n      jumbotron.scrollIntoView({ behavior: \"smooth\" })\n\n    }\n\n    consultarAPI()\n\n  }, [busqueda, alerta, paginaactual])\n\n  // definir pagina anterior\n  const paginaAnterior = () => {\n    const nuevaPaginaActual = paginaactual - 1\n    if (nuevaPaginaActual === 0) return\n    guardarPaginaActual(nuevaPaginaActual)\n  }\n\n  const paginaSiguiente = () => {\n    const nuevaPaginaActual = paginaactual + 1\n    if (nuevaPaginaActual > totalpaginas) return\n    guardarPaginaActual(nuevaPaginaActual)\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de Imágenes</p>\n        <Formulario\n          guardarBusqueda={guardarBusqueda}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        {alerta ? <><p className=\"bg-danger p-3 text-light\">No encontramos resultados, intenta otra palabra</p> <br /></> :\n          <ListadoImagen\n            imagenes={imagenes}\n          />}\n\n        {(paginaactual === 1) ? null :\n          (<button\n            type=\"button\"\n            className=\"bg-transparent text-dark btn-block border-0\"\n            onClick={paginaAnterior}\n          >&laquo; Anterior\n          </button>)}\n\n        {(paginaactual === totalpaginas) ? null :\n          (<button\n            type=\"button\"\n            className=\"bg-transparent text-dark btn-block border-0\"\n            onClick={paginaSiguiente}\n          >Siguiente &raquo;\n          </button>)}\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}